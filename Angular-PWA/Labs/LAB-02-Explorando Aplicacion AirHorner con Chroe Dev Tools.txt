# 游댌 Lab Explorando una PWA Existente con Chrome DevTools y Lighthouse

En este laboratorio, analizaremos una Aplicaci칩n Web Progresiva (PWA) existente para comprender sus caracter칤sticas y funcionamiento utilizando las herramientas de desarrollo de Chrome.

---

## 游꿢 Objetivos

- Identificar las caracter칤sticas clave de una PWA.
- Utilizar Chrome DevTools para inspeccionar el Service Worker y el almacenamiento en cach칠.
- Ejecutar una auditor칤a de rendimiento y PWA con Lighthouse.
- Evaluar la capacidad de la aplicaci칩n para funcionar offline.

---

## 游빍 Pasos

### 1. Acceder a la PWA

Abr칤 Google Chrome e ingres치 a la siguiente URL:

[https://airhorner.com/](https://airhorner.com/)

Esta es una PWA simple que simula una bocina de aire.

---

### 2. Inspeccionar con Chrome DevTools

1. Hac칠 clic derecho en cualquier parte de la p치gina y seleccion치 "Inspeccionar" o presion치 `Ctrl+Shift+I` (`Cmd+Option+I` en macOS) para abrir DevTools.
2. Naveg치 a la pesta침a **Application**.
3. En el panel izquierdo, explor치 las siguientes secciones:
   - **Manifest**: Observ치 el archivo `manifest.webmanifest` y sus propiedades como `name`, `icons`, `start_url`, etc.
   - **Service Workers**: Verific치 si hay un Service Worker registrado y activo.
   - **Cache Storage**: Explor치 las cach칠s creadas por la aplicaci칩n y los recursos almacenados.
   - **IndexedDB / Local Storage**: Observ치 si la aplicaci칩n utiliza almacenamiento local para guardar datos.

---

### 3. Probar el Funcionamiento Offline

1. En la pesta침a **Application**, activ치 la opci칩n **Offline** en la secci칩n **Service Workers**.
2. Recarg치 la p치gina (`F5` o `Ctrl+R`).
3. Verific치 si la aplicaci칩n sigue funcionando correctamente sin conexi칩n a internet.

---

### 4. Ejecutar una Auditor칤a con Lighthouse

> **Nota**: A partir de la segunda mitad de 2025, la pesta침a independiente de Lighthouse en DevTools ser치 descontinuada. Sin embargo, Lighthouse seguir치 disponible a trav칠s de otras interfaces como PageSpeed Insights y la l칤nea de comandos ([developer.chrome.com](https://developer.chrome.com/blog/perf-tooling-2024?utm_source=chatgpt.com)).

1. En DevTools, naveg치 a la pesta침a **Lighthouse**. Si no la ves, hac칠 clic en el 칤cono `>>` para encontrarla.
2. Seleccion치 las categor칤as que deseas auditar, como:
   - Performance
   - Progressive Web App
   - Best Practices
   - Accessibility
   - SEO
3. Hac칠 clic en **Generate report** para iniciar la auditor칤a.
4. Una vez completada, analiz치 el informe generado, prestando atenci칩n a:
   - Puntajes generales.
   - Recomendaciones para mejorar el rendimiento y la experiencia offline.
   - Cumplimiento de los criterios de PWA.

---

### 5. Analizar el Informe de Lighthouse

Revis치 las secciones del informe, enfoc치ndote en:

- **Performance**: Tiempo de carga, interactividad y estabilidad visual.
- **Progressive Web App**: Verificaci칩n de requisitos como el uso de HTTPS, presencia de un Service Worker, capacidad de ser instalada, etc.
- **Best Practices**: Uso de tecnolog칤as web modernas y seguras.

---

## 游늯 Entregable

- Capturas de pantalla de:
  - El archivo `manifest.webmanifest` en la pesta침a **Application**.
  - El Service Worker registrado y activo.
  - Los recursos almacenados en cach칠.
  - La aplicaci칩n funcionando en modo offline.
  - El informe de Lighthouse con los puntajes obtenidos.
- Un breve an치lisis (1-2 p치rrafos) sobre:
  - Las caracter칤sticas de PWA identificadas en la aplicaci칩n.
  - Las recomendaciones proporcionadas por Lighthouse y c칩mo podr칤an implementarse.


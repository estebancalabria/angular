# üõ†Ô∏è Lab PWA Sencilla en Angular - Contador con Funcionamiento Offline

En este laboratorio, vas a construir una aplicaci√≥n Angular simple de un contador, convertirla en una PWA, y probar que funcione correctamente offline utilizando el **Service Worker** de Angular.

---

## üéØ Objetivos

- Crear una aplicaci√≥n Angular con un contador.
- Convertir la aplicaci√≥n en una PWA.
- Configurar y probar el funcionamiento offline con Service Worker.
- Utilizar **Chrome DevTools** para verificar el funcionamiento offline.

---

## üß™ Pasos

### 1. Crear una nueva aplicaci√≥n Angular

Primero, creamos una aplicaci√≥n Angular b√°sica.

```bash
ng new angular-pwa-contador --routing=false --style=css
cd angular-pwa-contador
```

> ‚ö° Si te pregunta por `strict mode`, seleccion√° `Yes`.

---

### 2. Instalar soporte para PWA

A√±adimos el soporte para PWA en Angular.

```bash
ng add @angular/pwa
```

Este comando hace lo siguiente:
- Modifica `angular.json` para agregar el soporte de Service Worker.
- Crea el archivo `ngsw-config.json` para configurar el Service Worker.
- A√±ade el archivo `manifest.webmanifest` con los √≠conos necesarios.

---

### 3. Crear la l√≥gica del contador

Abre `src/app/app.component.html` y cambia su contenido a:

```html
<div class="app-container">
  <h1>Contador PWA</h1>
  <button (click)="increment()">Incrementar</button>
  <p>Contador: {{ counter }}</p>
</div>
```

En `src/app/app.component.ts`, agrega la l√≥gica del contador:

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  counter = 0;

  increment() {
    this.counter++;
  }
}
```

---

### 4. Construir la aplicaci√≥n en modo producci√≥n

Para activar el Service Worker y la funcionalidad offline, la aplicaci√≥n debe estar en modo producci√≥n.

```bash
ng build --prod
```

---

### 5. Servir la aplicaci√≥n de manera segura

Ahora, necesitamos un servidor para servir los archivos de producci√≥n. Para ello, usa `http-server`:

```bash
npm install -g http-server
cd dist/angular-pwa-contador
http-server -p 8080
```

Ahora, abre la aplicaci√≥n en [http://localhost:8080](http://localhost:8080).

---

### 6. Probar el funcionamiento offline con Chrome DevTools

#### 6.1. Abrir DevTools

Presiona `Ctrl+Shift+I` (o `Cmd+Opt+I` en macOS) para abrir las **DevTools** de Chrome.

#### 6.2. Verificar el Service Worker

1. En DevTools, ve a la pesta√±a **Application**.
2. En el panel izquierdo, selecciona **Service Workers**.
3. Aseg√∫rate de que el **Service Worker** est√© **activo**. Deber√≠a aparecer como **"Activated"**.

#### 6.3. Habilitar el modo offline

1. En la misma pesta√±a **Application**, selecciona la secci√≥n **Network**.
2. Marca la casilla **Offline**.
3. Recarga la p√°gina (presionando `Ctrl+R` o `Cmd+R`).

#### 6.4. Verificar el funcionamiento offline

Aseg√∫rate de que la aplicaci√≥n siga funcionando y que el contador contin√∫e disponible, incluso estando en modo offline.

1. Haz clic en **Incrementar** varias veces.
2. Cambia a modo offline en DevTools y aseg√∫rate de que el contador no se reinicie o pierda los valores.

---

## üìÑ Entregable

- Captura de pantalla mostrando el **Service Worker** activo en DevTools.
- Captura de pantalla de la app en modo **offline**, con el contador incrementando correctamente.

